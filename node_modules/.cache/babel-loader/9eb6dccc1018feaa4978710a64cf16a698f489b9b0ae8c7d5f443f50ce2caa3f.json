{"ast":null,"code":"var _jsxFileName = \"/Users/charleshuynh/Desktop/create-tools-keyword-destiny/src/components/KeywordDensityTool.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport { jsPDF } from 'jspdf';\nimport { parse } from 'json2csv';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KeywordDensityTool = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [keywords, setKeywords] = useState([]);\n  const [results, setResults] = useState([]);\n  const handleTextChange = e => {\n    setText(e.target.value);\n  };\n  const handleKeywordsChange = e => {\n    setKeywords(e.target.value.split(',').map(kw => kw.trim()).filter(Boolean));\n  };\n  const calculateDensity = () => {\n    const totalWords = text.split(/\\s+/).filter(Boolean).length;\n    const keywordResults = keywords.map(keyword => {\n      const keywordCount = text.split(new RegExp(`\\\\b${keyword}\\\\b`, 'gi')).length - 1;\n      const keywordDensity = keywordCount / totalWords * 100;\n      let status = 'low';\n      let suggestion = '';\n      if (keywordDensity >= 2 && keywordDensity <= 3) {\n        status = 'good';\n        suggestion = `Mật độ từ khóa '${keyword}' đạt mức tốt.`;\n      } else if (keywordDensity > 3) {\n        status = 'high';\n        const overuseCount = Math.ceil((keywordDensity - 3) / 100 * totalWords);\n        suggestion = `Mật độ từ khóa '${keyword}' quá cao. Hãy giảm bớt từ khóa này. Giảm bớt khoảng ${overuseCount} lần từ khóa '${keyword}'.`;\n      } else {\n        const neededCount = Math.ceil((2 - keywordDensity) / 100 * totalWords);\n        suggestion = `Mật độ từ khóa '${keyword}' quá thấp. Hãy thêm từ khóa này vào văn bản. Thêm khoảng ${neededCount} lần từ khóa '${keyword}'.`;\n      }\n      return {\n        keyword,\n        density: keywordDensity.toFixed(2),\n        status,\n        suggestion\n      };\n    });\n    setResults(keywordResults);\n  };\n  const downloadPDF = () => {\n    const doc = new jsPDF();\n    doc.text('Keyword Density Report', 10, 10);\n    results.forEach((result, index) => {\n      doc.text(`${index + 1}. ${result.suggestion}`, 10, 20 + index * 10);\n    });\n    doc.save('keyword-density-report.pdf');\n  };\n  const downloadCSV = () => {\n    const fields = ['keyword', 'density', 'status', 'suggestion'];\n    const csv = parse(results, {\n      fields\n    });\n    const blob = new Blob([csv], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.href = url;\n    link.setAttribute('download', 'keyword-density-report.csv');\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  const data = {\n    labels: results.map(result => result.keyword),\n    datasets: [{\n      label: 'Density',\n      data: results.map(result => result.density),\n      backgroundColor: results.map(result => result.status === 'low' ? 'yellow' : result.status === 'good' ? 'green' : 'red')\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Keyword Density Tool\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Paste your text here...\",\n      rows: \"10\",\n      cols: \"80\",\n      value: text,\n      onChange: handleTextChange,\n      style: {\n        width: '100%',\n        marginBottom: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter keywords (comma-separated)...\",\n      value: keywords.join(', '),\n      onChange: handleKeywordsChange,\n      style: {\n        width: '100%',\n        marginBottom: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: calculateDensity,\n      style: {\n        marginBottom: '20px'\n      },\n      children: \"Calculate Density\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Keyword Density Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: results.map(result => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: result.suggestion\n      }, result.keyword, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: downloadPDF,\n      style: {\n        marginRight: '10px'\n      },\n      children: \"Download PDF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: downloadCSV,\n      children: \"Download CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(KeywordDensityTool, \"X+gbrUePHNYhrX0T66U26q8/zpk=\");\n_c = KeywordDensityTool;\nexport default KeywordDensityTool;\nvar _c;\n$RefreshReg$(_c, \"KeywordDensityTool\");","map":{"version":3,"names":["React","useState","Bar","jsPDF","parse","jsxDEV","_jsxDEV","KeywordDensityTool","_s","text","setText","keywords","setKeywords","results","setResults","handleTextChange","e","target","value","handleKeywordsChange","split","map","kw","trim","filter","Boolean","calculateDensity","totalWords","length","keywordResults","keyword","keywordCount","RegExp","keywordDensity","status","suggestion","overuseCount","Math","ceil","neededCount","density","toFixed","downloadPDF","doc","forEach","result","index","save","downloadCSV","fields","csv","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","href","setAttribute","body","appendChild","click","removeChild","data","labels","datasets","label","backgroundColor","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","rows","cols","onChange","width","marginBottom","join","onClick","marginRight","_c","$RefreshReg$"],"sources":["/Users/charleshuynh/Desktop/create-tools-keyword-destiny/src/components/KeywordDensityTool.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { Bar } from 'react-chartjs-2'\nimport 'chart.js/auto'\nimport { jsPDF } from 'jspdf'\nimport { parse } from 'json2csv'\n\nconst KeywordDensityTool = () => {\n  const [text, setText] = useState('')\n  const [keywords, setKeywords] = useState([])\n  const [results, setResults] = useState([])\n\n  const handleTextChange = (e) => {\n    setText(e.target.value)\n  }\n\n  const handleKeywordsChange = (e) => {\n    setKeywords(\n      e.target.value\n        .split(',')\n        .map((kw) => kw.trim())\n        .filter(Boolean)\n    )\n  }\n\n  const calculateDensity = () => {\n    const totalWords = text.split(/\\s+/).filter(Boolean).length\n    const keywordResults = keywords.map((keyword) => {\n      const keywordCount = text.split(new RegExp(`\\\\b${keyword}\\\\b`, 'gi')).length - 1\n      const keywordDensity = (keywordCount / totalWords) * 100\n      let status = 'low'\n      let suggestion = ''\n\n      if (keywordDensity >= 2 && keywordDensity <= 3) {\n        status = 'good'\n        suggestion = `Mật độ từ khóa '${keyword}' đạt mức tốt.`\n      } else if (keywordDensity > 3) {\n        status = 'high'\n        const overuseCount = Math.ceil(((keywordDensity - 3) / 100) * totalWords)\n        suggestion = `Mật độ từ khóa '${keyword}' quá cao. Hãy giảm bớt từ khóa này. Giảm bớt khoảng ${overuseCount} lần từ khóa '${keyword}'.`\n      } else {\n        const neededCount = Math.ceil(((2 - keywordDensity) / 100) * totalWords)\n        suggestion = `Mật độ từ khóa '${keyword}' quá thấp. Hãy thêm từ khóa này vào văn bản. Thêm khoảng ${neededCount} lần từ khóa '${keyword}'.`\n      }\n\n      return { keyword, density: keywordDensity.toFixed(2), status, suggestion }\n    })\n\n    setResults(keywordResults)\n  }\n\n  const downloadPDF = () => {\n    const doc = new jsPDF()\n    doc.text('Keyword Density Report', 10, 10)\n    results.forEach((result, index) => {\n      doc.text(`${index + 1}. ${result.suggestion}`, 10, 20 + index * 10)\n    })\n    doc.save('keyword-density-report.pdf')\n  }\n\n  const downloadCSV = () => {\n    const fields = ['keyword', 'density', 'status', 'suggestion']\n    const csv = parse(results, { fields })\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' })\n    const link = document.createElement('a')\n    const url = URL.createObjectURL(blob)\n    link.href = url\n    link.setAttribute('download', 'keyword-density-report.csv')\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n  }\n\n  const data = {\n    labels: results.map((result) => result.keyword),\n    datasets: [\n      {\n        label: 'Density',\n        data: results.map((result) => result.density),\n        backgroundColor: results.map((result) => (result.status === 'low' ? 'yellow' : result.status === 'good' ? 'green' : 'red')),\n      },\n    ],\n  }\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Keyword Density Tool</h1>\n      <textarea\n        placeholder='Paste your text here...'\n        rows='10'\n        cols='80'\n        value={text}\n        onChange={handleTextChange}\n        style={{ width: '100%', marginBottom: '10px' }}\n      />\n      <input\n        type='text'\n        placeholder='Enter keywords (comma-separated)...'\n        value={keywords.join(', ')}\n        onChange={handleKeywordsChange}\n        style={{ width: '100%', marginBottom: '10px' }}\n      />\n      <button onClick={calculateDensity} style={{ marginBottom: '20px' }}>\n        Calculate Density\n      </button>\n      <h2>Keyword Density Results</h2>\n      <Bar data={data} />\n      <h3>\n        {results.map((result) => (\n          <p key={result.keyword}>{result.suggestion}</p>\n        ))}\n      </h3>\n      <button onClick={downloadPDF} style={{ marginRight: '10px' }}>\n        Download PDF\n      </button>\n      <button onClick={downloadCSV}>Download CSV</button>\n    </div>\n  )\n}\n\nexport default KeywordDensityTool\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}